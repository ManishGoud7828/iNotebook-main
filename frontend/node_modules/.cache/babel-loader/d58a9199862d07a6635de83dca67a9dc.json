{"ast":null,"code":"var _jsxFileName = \"C:\\\\iNotebook-main\\\\frontend\\\\src\\\\context\\\\notes\\\\NotesState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./NoteContext\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = 'http://localhost:5000/';\n  const initialstate = [];\n  const [notes, setnotes] = useState(initialstate);\n\n  //fetch all notes\n  const fetchNotes = async () => {\n    //add in databse\n    const url = `${host}api/notes/fetchallnotes`;\n    console.log(url);\n    const res = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": 'application-json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const data = await res.json();\n    setnotes(data);\n  };\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`${host}api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setnotes(notes.concat(note));\n  };\n\n  //Delete a Note\n  const deleteNote = async id => {\n    const url = `${host}api/notes/deletenote/${id}`;\n    const res = await fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": 'application-json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const jsondata = await res.json();\n    console.log(\"deleting node with id=\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n  };\n\n  //Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    //updating database\n    const url = `${host}api/notes/updatenote/${id}`;\n    const res = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = res.json();\n    //updating clint side\n    let newnotes = [];\n    for (let index = 0; index < notes.length; index++) {\n      newnotes[index] = notes[index];\n      if (notes[index]._id === id) {\n        const element = notes[index];\n        element.title = title;\n        element.tag = tag;\n        element.description = description;\n        newnotes[index] = element;\n      }\n    }\n    setnotes(newnotes);\n  };\n\n  //to logout\n  const logOut = () => {\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setnotes,\n      addNote,\n      deleteNote,\n      editNote,\n      fetchNotes,\n      logOut\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"ZfBM/8wjABZKSYOhC95utd++gbg=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","initialstate","notes","setnotes","fetchNotes","url","console","log","res","fetch","method","headers","localStorage","getItem","data","json","addNote","title","description","tag","response","body","JSON","stringify","note","concat","deleteNote","id","jsondata","newNotes","filter","_id","editNote","newnotes","index","length","element","logOut","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/iNotebook-main/frontend/src/context/notes/NotesState.js"],"sourcesContent":["\nimport NoteContext from \"./NoteContext\";\nimport {useState} from 'react';\nconst NoteState=(props)=>{\n      const host='http://localhost:5000/';\n       const initialstate=[];\n       const [notes,setnotes] = useState(initialstate)\n     \n      //fetch all notes\n      const fetchNotes=async()=>{\n        //add in databse\n       const url=`${host}api/notes/fetchallnotes`;\n       console.log(url);\n       const res=await fetch(url,{method:\"GET\",\n       headers:{\n         \"Content-Type\":'application-json',\n         'auth-token':localStorage.getItem('token')\n       }}\n      );\n      const data=await res.json();\n      setnotes(data);\n      }\n      \n      const addNote = async (title, description, tag) => {\n        // TODO: API Call\n        // API Call \n        const response = await fetch(`${host}api/notes/addnote`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            \"auth-token\": localStorage.getItem('token')\n          },\n          body: JSON.stringify({title, description, tag})\n        });\n    \n        const note = await response.json();\n        setnotes(notes.concat(note))\n      }\n    \n      //Delete a Note\n      const deleteNote=async(id)=>{\n        const url=`${host}api/notes/deletenote/${id}`;\n        const res=await fetch(url,{method:\"DELETE\",\n        headers:{\n          \"Content-Type\":'application-json',\n          'auth-token':localStorage.getItem('token')\n        }\n        \n      });\n       const jsondata=await res.json();\n      \n      \n\n\n        console.log(\"deleting node with id=\"+id);\n        const newNotes=notes.filter((note)=>{return note._id!==id});\n        setnotes(newNotes);\n      }\n\n      //Edit a Note\n      const editNote=async(id,title,description,tag)=>{\n        //updating database\n        const url=`${host}api/notes/updatenote/${id}`;\n        const res=await fetch(url,{method:\"PUT\",\n        headers:{\n          \"Content-Type\":'application/json',\n          'auth-token':localStorage.getItem('token')\n        }\n        ,\n        body:JSON.stringify({title,description,tag}),\n      });\n       const json=res.json();\n       //updating clint side\n       let newnotes=[];\n        for (let index = 0; index < notes.length; index++) {\n          newnotes[index]=notes[index];\n          if(notes[index]._id===id){\n            const element=notes[index];\n            element.title=title;\n            element.tag=tag;\n            element.description=description;\n            newnotes[index]=element;\n          }\n         \n        }\n        setnotes(newnotes);\n      }\n\n    //to logout\n    const logOut=()=>{\n      localStorage.removeItem('token');\n     \n      \n      }\n\n    return (\n        <NoteContext.Provider value={{notes,setnotes,addNote,deleteNote,editNote,fetchNotes,logOut}}>\n            {props.children}\n        </NoteContext.Provider>\n    )\n    }\n\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module"}